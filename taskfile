#!/bin/bash
# https://github.com/adriancooney/Taskfile
#Include npm installed binaries so we can call those
#directly from the taskfile.
PATH=./src/node_modules/.bin:$PATH

# You could aliase taskfiles so you
# can run them like: run <task>
# echo alias run=./taskfile > .bashrc

function link:core {
    rm -r ./src/node_modules/application-core && ln -s ~/Development/NODEJS/application-core ./src/node_modules/application-core
    rm -r ./src/node_modules/base-cli-commands && ln -s ~/Development/NODEJS/base-cli-commands ./src/node_modules/base-cli-commands
    rm -r ./src/node_modules/core.io-pubsub-mqtt && ln -s ~/Development/NODEJS/core.io-pubsub-mqtt ./src/node_modules/core.io-pubsub-mqtt 
    rm -r ./src/node_modules/core.io-persistence && ln -s ~/Development/NODEJS/core.io-persistence ./src/node_modules/core.io-persistence
    rm -r ./src/node_modules/core.io-express-server && ln -s ~/Development/NODEJS/core.io-express-server ./src/node_modules/core.io-express-server
}
##########################################
# Publish NPM/Github Tags
##########################################

function _publish:check {
    if output=$(git status --untracked-files=no --porcelain) && [ -z "$output" ]; then
        # Working directory clean
        echo "Ready to publish..."    
    else
        red=`tput setaf 1`
        reset=`tput sgr0`
        echo "  ${red}Git working directory not clean."
        echo "  Commit your changes and try again.${reset}"
        exit 1
    fi
}

function publish:major {
    _publish:check
    npm version major && npm publish && npm version patch && git push --tags && git push origin master
}

function publish:minor {
    _publish:check
    npm version minor && npm publish && npm version patch && git push --tags && git push origin master
}

function publish:patch {
    _publish:check
    npm version patch && npm publish && git push --tags && git push origin master
}

##########################################
# Build
##########################################


function default {
   help
}

function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    # `compgen -A` bash built in, it
    # will list the functions in this
    # taskfile. 
    # Functions starting with '_' will be ignored.
    compgen -A function | grep -v '^_' | cat -n
}

# This is a pass through:
# `./taskfile build web`
# `./taskfile build-all`
#
# If we call it without args
# it will call default func.
# `./taskfile`
#
# If you want to want to call
# this taskfile from package.json
# and `npm run` tasks, you can:
# 1 - Aliase "test": "./taskfile test"
# 2 - Use `--` to send args: `npm run build -- prod`

TIMEFORMAT="Task completed in %3lR"

time ${@:-default}
